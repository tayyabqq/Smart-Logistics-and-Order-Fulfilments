Smart Logistics & Order Fulfillment System
Instruction Manual (v1.0)

1. System Overview
An AI-powered restaurant order management system with:
âœ” Multilingual Chatbot (English/Hindi/Urdu)
âœ” Real-time Kitchen/Delivery Tracking
âœ” Automated Inventory Sync
âœ” Portion-Based Pricing

2. Hardware Requirements
Component	Specification
Server	4 vCPUs, 8GB RAM, 100GB SSD (Linux)
Kitchen Terminal	Raspberry Pi 4B+ (2GB), 7" Touchscreen
Networking	Stable 50Mbps+ connection
3. Software Installation
3.1 Backend Setup
bash
# Clone repository
git clone https://github.com/your-repo/order-system.git
cd order-system

# Create virtual environment
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows

# Install dependencies
pip install -r requirements.txt

# Configure environment variables
cp .env.example .env
nano .env  # Edit DB credentials, API keys
3.2 Database Initialization
sql
-- MySQL setup
CREATE DATABASE restaurant_orders;
CREATE USER 'order_user'@'%' IDENTIFIED BY 'secure_password';
GRANT ALL PRIVILEGES ON restaurant_orders.* TO 'order_user'@'%';
FLUSH PRIVILEGES;

-- Import schema
mysql -u root -p restaurant_orders < schema.sql
3.3 Frontend Deployment
bash
cd frontend
npm install
npm run build  # Production build
4. System Configuration
4.1 Dialogflow Integration
Go to Dialogflow Console

Create agent â†’ Import agent.zip from project files

Enable Webhook in Fulfillment settings:

yaml
URL: https://your-domain.com/api/webhook
4.2 Portion Pricing Rules
Edit config/menu_pricing.json:

json
{
  "Hyderabadi_Mutton_Biryani": {
    "full": 450,
    "half": 250,
    "min_portion": "half" 
  }
}
5. Operational Guide
5.1 Taking Orders
Via Chatbot:

Customer says: "2 half Mutton Biryanis and 1 Lassi"

System:

Validates inventory

Calculates total (2Ã—250 + 1Ã—60 = â‚¹560)

Sends ticket to kitchen

Manual Override:

python
# API endpoint
POST /api/orders
Body: {
  "items": [
    {"name": "Mutton Biryani", "portion": "half", "qty": 2},
    {"name": "Lassi", "qty": 1}
  ]
}
5.2 Kitchen Workflow
Orders auto-appear on Raspberry Pi display

Chef marks stages:

ðŸŸ¡ Preparing â†’ ðŸŸ¢ Ready â†’ ðŸ”´ Delayed

WebSocket updates customer in real-time

5.3 Delivery Tracking
Assign driver via admin panel

Live location sharing using Google Maps API

6. Maintenance
6.1 Daily Checks
Verify database backups:

bash
mysqldump -u root -p restaurant_orders > backup_$(date +%F).sql
Monitor latency:

bash
curl -X GET "https://api.your-domain.com/health"
6.2 Updating Menu
Edit database/seed_data.sql

Run:

bash
flask update-menu
7. Troubleshooting
Issue	Solution
Chatbot not responding	Check Dialogflow webhook logs at logs/dialogflow.log
Order sync delay	Restart WebSocket service: sudo systemctl restart websocketd
Payment failures	Verify Stripe/UPI keys in .env
8. Emergency Protocols
System Downtime:

Switch to manual mode: flask enable-legacy-mode

Log orders in backup/orders_emergency.csv

Data Recovery:

bash
mysql -u root -p restaurant_orders < latest_backup.sql
Support Contact:
ðŸ“ž +91-XXXXXXXXXX | âœ‰ support@restaurant-tech.com

Appendix:

API Documentation

Hardware Wiring Guide

Note: Always test updates in staging environment before production deployment.